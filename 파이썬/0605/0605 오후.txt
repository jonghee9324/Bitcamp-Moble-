@패키지
__init__.py 파일이 있어야 패키지로 인식가능

@모듈
파일 추가(현재 디렉토리와 하위 디렉토리)

@예외처리
'내가 아는 에러는 에러가 아니다' 라고 표현하고 싶을 때 사용

파이썬  try ~ except
파일을 오픈하는 것을 예외처리하면 try, except문에 close를 써줘야한다
하지만 이구문을 2번 작성하지 않고 한번에 할 수있다. 그 방법은 finally: 구문을 작성한다
finally는 반드시 타야하는 구문이다. 따라서 반드시 사용되야하는 부분은 finally에 사용한다. 현업에서 많이 사용
에러가 발생하면 밑에 무슨 내용이 있던 except 구문으로 간다.

except구문은 여러번 작성할 수 있다. except구문에 조건을 제시하면 해당 조건에 만족하는 경우에만 except를 탄다
여러번 작성하면 switch case 느낌, 
except 구문에 조건을 Exception이라고 작성하거나 아무것도 적지 않으면 모든 오류를 잡을 수 있다.

@OS
스케줄링
여러개의 시스템이 동시에 되기 위해서 우선순위를 정해 작업큐에 탑재해 실행시키는 행위

@스레드
작업, 동시에 실행되는 것
싱글 스레드는 하나의 작업(위에서부터 아래로 흐르는 코드, 우리가 흔히 짜는 프로그램)
두 개 이상의 작업을 멀티 스레드라고 한다.
해당 시스템들을 쪼개서 작업큐에 탑재한다.
@@레이스컨디션
한 자원을 두고, 두 개 이상의 스레드가 자원을 독점하기 위해 접근하여 생기는 문제
-해결법
스레드가 2개 이상일 때 사용하고 한쪽이 자원에 접근하면 그 자원에 대해 Lock을 걸고
다쓰면 자원에 대해 unLock을 한다.  그러면 다른쪽은 먼저 자원에 접근한 스레드가 자원을 다 쓸 떄까지 wait한다

이 때 단점은 실행순서를 예측할 수 없어 wait하는 쪽의 실행이 먼저되면 무한대기를 하게된다.
위 상황이 데드락.

-사용법
import threading
t= threading.Thread(target = 메소드명 )
메소드명에 함수로 넣으면 실행됨
t.start()


@random
random.random()은 0~1까지의 숫자들이 랜덤으로 나온다.
따라서 0~9를 쓰고싶으면 10을 곱해주고
1부터 하기 위해서는 1을 더해준다.
randint(매개변수, 매개변수) 매개변수는 랜덤으로 출력할 숫자의 최소범위와 최대 범위를 입력한다.
