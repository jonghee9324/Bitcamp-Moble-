@파이썬 - insert
리스트명.insert(추가할 인덱스, 데이터)
매개변수로 반드시 넣을 데이터와 데이터를 넣을 인덱스를 가져야한다.
데이터 삽입 시 밀어서 넣는 개념 따라서 추가할 인덱스 위치에 이미 값이 존재하면 그 값을 밀어냄
ex) l = [1,2,3,4] l.insert(2, 10) >>>  l = [1,2,10,3,4]
리스트의 길이보다 큰 값을 인덱스로 지정하고 값을 넣으면 리스트의 맨 끝에 데이터 삽입

@파이썬 - remove
지울 데이터를 매개변수로 갖는다. (즉 , 매개변수로 인덱스를 사용하면 에러)
리스트명.remove(지울데이터)

@파이썬 - append
데이터가 리스트 맨 뒤에 그대로 붙음

@파이썬 - extend
데이터의 값만 리스트 맨 뒤에 붙음

@스택
FILO  넣을 때 push, 뺄 때 pop

@파이썬 - pop
매개변수로 내용을 지울 인덱스를 받을 수 있지만 쓰지 말것
매개변수를 안쓰면 리스트 맨 뒤의 내용이 출력되면서 지워진다.

@파이썬 - 리스트
리스트는 내 마음대로 값을 변경할 수 있다.

@파이썬 - 튜플
( )로 표현
튜플안에 리스트를 넣을 수 있음, 튜플에도 어떤 데이터든 넣을 수 있음 다만 데이터의 수정이 안될뿐
튜플로 정의된 값은 변경할 수 없음, 추가, 삭제 안됨
튜플의 내용 변경 시 리스트로 변환 뒤 값을 수정하고 다시 튜플로 만들어야함
튜플을 리스트로 바꾸는 방법은 형변환,
list(튜플변수명)

@파이썬 - Dictionary
{ }로 표현
자바의 hashMap과 비슷하다
키 : 밸류의 형태로 데이터를 갖음
값을 가져올 땐 변수명[키값] 으로 가져온다.

@파이썬 - set
{ }로 표현
중복을 허용하지 않는 자료형
순서가 없다

@파이썬 - if
( )로 묶지 않아도 됨

@반복문
반복문은 반드시 탈출조건이 필요하다.
무한루프를 위해 while(1)로 작성하면 절대 안됨
***소스의 공통인 부분만 내가 줄여서 사용해야함
파이썬에서는 while이 반복문의 역할, for문은 좀 다름, while문은 강제로 카운트를 증가시켜줘야함

@파이썬 - for
리스트 안의 내용을 뿌려주는 느낌임
List가 반드시 필요함 즉, 리스트 안의 내용을 하나씩 가져오고 싶을 때 사용
리스트 안의 내용이 없으면 for문 종료
for in range는 강제로 카운트를 증가시키지 않아도된다는 장점이 있다.

-------------------------
@@정리

@파이썬의 나열하는 자료형
1. 리스트 [ ], 추가 삭제 변경 가능
2. 튜플 ( ), 추가 삭제 변경 불가능
3. 딕셔너리 { }, 추가 삭제 변경 가능, 키:값 쌍으로 저장된다.

@많은 자료를 저장하는 방법
1. 리스트 : 수정가능 [ ]
 - 추가 : insert(인덱스 구조), extend(안에 있는 데이터를 삽입), append(그대로 삽입)
 - 삭제 : remove(데이터 삭제), pop(맨 뒤에 있는 값 삭제)
2. 튜플 : 수정불가 ( )
3. 딕셔너리 : 수정가능 { }
4. 집합 : 중복허용안함, 순서 없음

@조건문
else if  >>> 파이썬은 elif

@반복문
반드시 탈출조건을 필요하다.
for in range를 통해 while과 비슷하게 사용할 수 있다.