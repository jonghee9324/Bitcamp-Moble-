<기초지식>
웹개발에 필요한 언어 
- jsp // 자바로 페이지를 만드는 언어
- 자바스크립트
-스프링
-db

앱개발
-안드로이드 : 자바, 코틀린
- 아이폰 : 오브젝트 c

인공지능
-파이썬

임베디드
- c, c++

모듈화 // 클래스를 기능별로 나누는 것 
클래스를 만든 이유 // 협업이 필요한데 c는 효율이 떨어지기 때문 

컴퓨터는 이진수밖에 모른다.

객체를 메모리에 올리는 작업을 객체화
-------------------------------------------------------------------
<수업>
@ c와 c++ 의 차이 // 클래스

@언어 변천과정
c >> c++ >> C# 
	 >> object c
java

c는 메모리관리를 개발자가 해야함, 그래서 메모리관리를 컴퓨터가 할 수 있는 java만듦
java는 포인터를 없애고 클래스를 만듦, 이를 jvm이 함, jvm이 컴파일함

@vm
하드웨어엔 운영체제 1개만 존재가능, 운영체제는 hw cpu에 기준해서 설치해야함
이를 vm이 가능하게 해줌
단점 : 느림

@C#
c++, java가 합쳐진 상태 
호환성 좋음

@파이썬
인터프리터 방식
라이브러리 많음(인공지능)
인터프리터 방식을 따르기 때문에 완벽하게 짜야함, 도움 안줌
IDLE엔 변수명만 찍어도 출력됨, 하지만 파일로 작성시 print()로 써줘야함


@인터프리터
빌드과정 필요 없음
쓰는 즉시 해석 함(한 줄씩 해석 및 실행 = 한줄씩 컴파일 )
자주 실행 시 컴파일방식의 언어보다 실행속도가 떨어짐(실행할 때마다 속도가 일정)
최근 hw성능이 좋아져서 사용되기 시작.
한줄씩 컴파일 하기 때문에 컴파일러가 필요가 없음, os가 직접 실행 그래서 os에 적합한 인터프리터가 필요



@컴파일
전체 소스 해석
언어 >>> 기계어 변환 (처음 빌드는 시간이 오래 걸림, 그 이후 빨라짐)
실행과 해석을 분리
소스에서 하나라도 오류가 나면 컴파일 안됨

컴파일하는 언어 : java, c, c++, C# 등등
컴파일러 :소스코드 오류 체크를 함, 오류가 없으면 랭기지를 기계어(어셈블리)로 변환해줌
기계어로 변환시 0과1로 변환됨, 이 때 0과 1의 검별은 전기신호로 확인함(1이면 5v, 0이면 0v)
이 과정을 빌드라고 함
해석을 한 번 하면 전체를 체크하고 빌드를 했기 때문에 재실행 시 처리속도가 빠름

필요 이유
- os에 따라 메모리 사이즈, 구조가 다름
os 는 hw cpu에 따라 다름


@오버플로우 
원하는 값이 범위를 초과하여 부호가 바뀐 처음으로 돌아가는 것
ex) 1byte 에서 127에 1을 더하면 -128이 됨

@boolean 
자바에서만 존재, c에서 bool이라고 사용했지만 그것은 c++로 바로 변환된 것
변수의 첫자는 반드시 대문자 True, False

@float
실수의 기본 변수형이 아님 실수 기본 변수형은 double float은 뒤에 f를 붙여줘야함
ex) 1.2f

@len()
문자열에 적용할 경우 띄어쓰기도 포함